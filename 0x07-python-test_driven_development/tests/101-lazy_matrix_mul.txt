module ``101-lazy_matrix_mul`` 
=========================

usage ``lazy_matrix_mul``
---------------------

Import module:
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Test 2 good matrices:
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
    array([[19, 22],
           [43, 50]])

Test 2 not fgood matrices:
    >>> lazy_matrix_mul([[1, 2, 3], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

Test vide matrix 4:
    >>> lazy_matrix_mul([], [[3]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (0,) and (1,1) not aligned: 0 (dim 0) != 1 (dim 0)

Test float matrices:
    >>> lazy_matrix_mul([[1.5, 2.5], [3.5, 4.5]], [[5.5, 6.5], [7.5, 8.5]])
    array([[27., 31.],
           [53., 61.]])

Test vide matrix:
    >>> lazy_matrix_mul([], [[15, 2], [35, 4]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

Test vide matrix 2:
    >>> lazy_matrix_mul([[42]], [])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,1) and (0,) not aligned: 1 (dim 1) != 0 (dim 0)

Test vide matrix:
    >>> lazy_matrix_mul([[3]], [[]])
    array([], shape=(1, 0), dtype=int64)

Test simple case:
    >>> lazy_matrix_mul([[2]], [[9]])
    array([[18]])

Test string arg:
    >>> lazy_matrix_mul("hey", [[2]])
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

Test string arg2:
    >>> lazy_matrix_mul([[8]], "hey")
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

Test int list2:
    >>> lazy_matrix_mul([1, 566, 4], [[15]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (3,) and (1,1) not aligned: 3 (dim 0) != 1 (dim 0)

Test int list 2:
    >>> lazy_matrix_mul([[99]], [2, 55, 6])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,1) and (3,) not aligned: 1 (dim 1) != 3 (dim 0)

Test strnum list:
    >>> lazy_matrix_mul([[1, 'a'], [3, 4]], [[5, 6], [7, 8]])
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum

Test notnum list 2 :
    >>> lazy_matrix_mul([[2, 4, 6]], [["hey"]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,3) and (1,1) not aligned: 3 (dim 1) != 1 (dim 0)

Test bad linesd:
    >>> lazy_matrix_mul([[16, 2], [3, 54, 5], [3, 24]], [[5, 6, 1], [7, 8, 2]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

Test badlines:
    >>> lazy_matrix_mul([[11, 2], [3,55], [3, 4]], [[5, 33, 1], [7, 2]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

Test missing one:
    >>> lazy_matrix_mul([[55]])
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Test missing both:
    >>> lazy_matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
